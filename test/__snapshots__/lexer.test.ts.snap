// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lexer should correctly parse esacpe sequences 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "string with \\\\ in it and also \\"",
    "type": "string",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex a date correctly 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "2020-01-01",
    "type": "date",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex booleans correctly 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "ex",
    "type": "filterEx",
  },
  Object {
    "str": "true",
    "type": "boolean",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": ",",
    "type": "and",
  },
  Object {
    "str": "path2",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "ex",
    "type": "filterEx",
  },
  Object {
    "str": "false",
    "type": "boolean",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex bundles correctly 1`] = `
Array [
  Object {
    "str": "(",
    "type": "bundleStart",
  },
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "asd",
    "type": "string",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": ",",
    "type": "and",
  },
  Object {
    "str": "path2",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "bdf",
    "type": "string",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": ")",
    "type": "bundleEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex decimal numbers correctly 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "-123.123",
    "type": "number",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex decimal numbers correctly 2`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": ".123",
    "type": "number",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex expression bundles correctly 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "asd",
    "type": "string",
  },
  Object {
    "str": "|",
    "type": "or",
  },
  Object {
    "str": "gt",
    "type": "filterGt",
  },
  Object {
    "str": "asdf",
    "type": "string",
  },
  Object {
    "str": ",",
    "type": "and",
  },
  Object {
    "str": "lt",
    "type": "filterLt",
  },
  Object {
    "str": "asdf",
    "type": "string",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex offset date time 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "2020-01-01T12:00:00.000+01:00",
    "type": "dateTime",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex offset date time without colon 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "2020-01-01T12:00:00.000+0100",
    "type": "dateTime",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex the example correctly 1`] = `
Array [
  Object {
    "str": "name.first",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "foo",
    "type": "string",
  },
  Object {
    "str": "|",
    "type": "or",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "bar",
    "type": "string",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "|",
    "type": "or",
  },
  Object {
    "str": "email",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "ct",
    "type": "filterCt",
  },
  Object {
    "str": "foo",
    "type": "string",
  },
  Object {
    "str": ",",
    "type": "and",
  },
  Object {
    "str": "ct",
    "type": "filterCt",
  },
  Object {
    "str": "bar",
    "type": "string",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": ",",
    "type": "and",
  },
  Object {
    "str": "age",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "(",
    "type": "bundleStart",
  },
  Object {
    "str": "gt",
    "type": "filterGt",
  },
  Object {
    "str": "4.5",
    "type": "number",
  },
  Object {
    "str": ",",
    "type": "and",
  },
  Object {
    "str": "lt",
    "type": "filterLt",
  },
  Object {
    "str": "-10",
    "type": "number",
  },
  Object {
    "str": ")",
    "type": "bundleEnd",
  },
  Object {
    "str": "|",
    "type": "or",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "15",
    "type": "number",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should lex zulu date time 1`] = `
Array [
  Object {
    "str": "path",
    "type": "path",
  },
  Object {
    "str": "[",
    "type": "filtersStart",
  },
  Object {
    "str": "eq",
    "type": "filterEq",
  },
  Object {
    "str": "2020-01-01T12:00:00.000Z",
    "type": "dateTime",
  },
  Object {
    "str": "]",
    "type": "filtersEnd",
  },
  Object {
    "str": "",
    "type": "eof",
  },
]
`;

exports[`lexer should not lex dates with invalid formats 1`] = `"invalid date value: 2020-1"`;

exports[`lexer should not lex incomplete date time values 1`] = `"invalid date time value: 2020-10-10T12"`;

exports[`lexer should not lex incomplete date time values 2`] = `"invalid date time value: 2020-10-10T12:12"`;

exports[`lexer should not lex incomplete date time values 3`] = `"invalid date time value: 2020-10-10T12:12:12"`;

exports[`lexer should not lex incomplete date time values 4`] = `"invalid date time value: 2020-10-10T12:12:12.123"`;

exports[`lexer should not lex incomplete date time values 5`] = `"invalid date time value: 2020-10-10T12:12:12.123+"`;

exports[`lexer should not lex incomplete date time values 6`] = `"invalid date time value: 2020-10-10T12:12:12.123+12"`;

exports[`lexer should not lex incomplete date time values 7`] = `"invalid date time value: 2020-10-10T12:12:12.123+12:"`;

exports[`lexer should not lex incomplete dates 1`] = `"invalid date value: 2020-23"`;

exports[`lexer should throw a parsing error on unended string values 1`] = `"expected string to end, but got asd"`;

exports[`lexer should throw an EQUParsingError on error 1`] = `"expected filter type, got "`;

exports[`lexer should throw an error if the path is missing 1`] = `"expected path, but got ["`;

exports[`lexer should throw an error on an invalid escape sequence 1`] = `"invalid escape sequence: \\\\s"`;

exports[`lexer should throw an error on an invalid filter value 1`] = `"expected filter value but got []"`;

exports[`lexer should throw an error on an invalid number 1`] = `"invalid number: .12."`;

exports[`lexer should throw an error on invalid combinator 1`] = `"invalid combinator: :"`;

exports[`lexer should throw an error on missing filterIs 1`] = `"expected : but got ]"`;

exports[`lexer should throw an error on missing start filters 1`] = `"expected '[', but got "`;
